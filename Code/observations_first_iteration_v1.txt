General
    - The unit tests are using underscores for the method's names but the classes are using camel case, you should define only one naming convention
    - Documentation for all the methods
    - Is this code according your classes diagram design
    - Review the line length of all the files, there are several lines with more than 80 characters
    - What is the purpose of the Backup folder?
    - Organize your code well, i am guessing that the test cases folder should contain the unit tests for all your classes, so put all your unit tests inside that folder and rename it because these are not test cases are unit tests
    - How i can run all the unit tests created?
    - 


Configuration XML

    -If the output format is Console why do we need the path attribute?
            <OutputFormat>
                <item fileName="MySudokus" name="Console" path="c:\\user" />
                <item fileName="MySudokus" name="File" path="c:\\user" />
            </OutputFormat>
    - What is this tag? what is the purpose of this tag?
           <FilePath>
                <item name="c:\user\SudokuFile.txt" />
            </FilePath>

- Matrix dimension does not sound very clear, what do you think if we change this to sudoku size? and in any case if we leave this variable are we saying that the algorithms will support another sizes of sudokus?

        <MatrixDimension>
            <item name="9" />
        </MatrixDimension>

ConfigurationXMLUT.py
    - Remove all the code commented if this is not needed, you should never have code commented
    - The next tests are useless:
        def test_file_is_not_empty(self):
            pass
        def test_file_exist(self):
            pass

ConsoleMenu.py
    - The method drawLine should print a line instead of returning according the name, if you want to return a string it will be better use a get_a_string_line
    - The method does not have spaces afer commas validateUserInput(self,optionSelected,numberOptions) 
    - The method mainConsoleMenu is too big, too complex, many logic in one method 
    - The getUserInput return the option selected as a string and in the validate method you need it as a integer, but in the mainConsoleMenu is used as a string, be consistent and just handle as string or number not both.
    - in the method mainConsoleMenu these comparisons optionSelected == str(1) are not clear, check this code and see which one is more readable:
        SOLVE_GAME_OPTION = '1'
        GENERATE_GAME_OPTION = '2'

                if(optionSelected == SOLVE_GAME_OPTION):                        
                        print("The game will be solved ")
                        self.settingsSudoku.setSudokuGameType("Solve")
                elif(optionSelected == GENERATE_GAME_OPTION):
                        print("The game will be generated ")

    - the third option of the mainConsole menu when the option is str(3) is another complete menu for settings extract all this logic to another method

TestConsoleMenu.py
    - This file is using camel case convention make sure all the files follow the same conventions
    - 